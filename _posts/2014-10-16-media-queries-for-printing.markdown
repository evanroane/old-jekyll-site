---
layout: post
title:  "Using Media Queries to Create Print Versions of Web Pages in Jekyll"
date:   2014-10-16 2:56 pm
categories: NSS, Media Queries
---

Sometimes when you create a web page's content, you might intend for certain pages to be printable. You may also wish to specify exactly _how_ the page's content will available to the user in a printable format that removes the style formatting from CSS or SASS while still specifying the font and style of the page's content. The tool that serves this purpose is the CSS media query. For users of Jekyll, there are additional complications when using media queries since Jekyll uses the simplified "Markdown" language to generate the HTML code that the browser actually reads.

__[1.]  Figure Out What You Want__

I recommend using your favorite word processor to play around with your content to see how it fits on a standard page. Think of this as a sketch since you will eventually need to check your printable page in your browser's print preview dialogue.

__[2.]  Place Media Queries _After_ your regular CSS Code In a Dedicated File__

The main.css file that you see in "_site/css/main.css" is generated by Jekyll from three other files. The easiest and cleanest way to include your print media queries in the "_site/css/main.css" which is read by the browser is to add a file named "_print.scss" to the _sass folder in your Jekyll page root directory. To get Jekyll to recognize that you have added a new sheet, open "main.scss" and look for the following starting around line 45
{% highlight sass linenos %}
@import
    "base",
    "layout",
    "syntax-highlighting"
    "syntax-highlighting",
    "print"
 ;
 {% endhighlight %}
Adding the text ''"print"'' to what is displayed as line 6 tells Jekyll to pull the code from your new "_print.scss" document. Also the fact that it is listed last will tell Jekyll to add this code the end of "main.css" when the code is merged. I like having a dedicated file for media queries rather than figuring out the best place to put it in the style sheets that Jekyll provides.

__[3.] Special considerations for Jekyll__

Since Jekyll uses the Markdown language to generate its HTML code, we need to look at just how this is done in a basic content page. It is important to bear in mind that when you are writing Markdown code, you are also creating HTML code with class properties that may be target by your CSS.

<img src="{{ site.url }}/img/blog-media-queries-post.png" />

Daring Fireball has a good resource for how to use Markdown for creating page content. You can find it [here](http://daringfireball.net/projects/markdown/syntax). It will useful for finding html code Jekyll generates that I might not cover in this article.

It would seem that the best practice in writing print media queries for a Jekyll page would make the elements contained in the _includes/header.html and _includes/footer.html invisible using the following:

{% highlight css linenos%}

@media print {
 /* Print styles go here */
 .site-header {
   display: hidden;
}
 .site-footer {
   display: hidden;
 }
{% endhighlight %}

If you want some of the _include/header.html classes visible when printing, target the following in your media query file:

{% highlight html linenos %}
<header class="site-header">
<div class="wrapper">
<div class="site-title">
<nav class="site-nav">
<a href="#" class="menu-icon">
<div class="trigger">
<a class="page-link" href="/">
{% endhighlight %}

The following tags are generated in the content area of the page.

{% highlight html linenos%}
<div class="page-content">
<div class="wrapper">
<p>
<ul>
<ol>
<li>
{% endhighlight %}

Keep in mind that elements that are children of an element with a class can be defined through their parent's class rather than using HTML in your Markdown code. For example to access a paragraph element, you might use the following:

{% highlight css linenos%}
 .pagecontent p {
   font-family: "Times New Roman", Georgia, Serif;
 }
 {% endhighlight %}

The following tages and classes are found in Jekyll's blog posts:

{% highlight html linenos%}
<div class="post">
<header class="post-header">
<h1 class="post-title">
<article class="post-content">

{% endhighlight %}

Finally, the footer elements and classes are shown below. You might consider using some of these elements if it serves your purposes.

{% highlight html linenos%}
<footer class="site-footer">
<div class="wrapper">
<div class="footer-col-wrapper">
<div class="footer-col  footer-col-1">
<ul class="contact-list">
<div class="footer-col  footer-col-2">
<ul class="social-media-list">
<span class="icon  icon--github">
{% endhighlight %}

__[4.] General Suggestions__

While I suggest that you might use parts of the header and footer elements, I don't see a compelling reason to do so. With that in mind I suggest we begin our "print.scss" file with the following code:

{% highlight css linenos%}
@media print {
  body {
    background: none;
  }
  .site header, .site-footer {
    display: hidden;
  }
{% endhighlight %}

Next, it makes sense to turn to the elements that are primarily responsible for formatting your document. Be sure to inclide these in the scope of @media print {}.

{% highlight css linenos%}
.page-content p {}
.page-content ul {}
.page-content ol {}
.page-content li {}
{% endhighlight %}

Finally, it is worth noting that header elements such as <h1> or <h2> etc. are assigned classes that resemble their contents. So, if I write the following in my Markdown file...

{% highlight html linenos%}
##Hello world!
{% endhighlight %}

...Jekyll will generate the following HTML...
{% highlight html linenos%}
<h2 id="hello-world">Hello world!</h2>
{% endhighlight %}

...which I can style using:
{% highlight css linenos%}
h2#hello-world {
  font-family: "Comic Sans";
}
{% endhighlight %}

Notice that the HTML Jekyll generates replaces spaces with "en" dashes and ignores other punctuation including '!', '?', '@', '%', '^', '&', '*', '+', '-', '_', '=', '§', '±', '`', and '~'. There may be other symbols ignored, but these are the only ones I tested.

Angle brackets, '<' and '>' are also permissible, but Markdown interprets text typed between angle brackets as an HTML tag if the text follows the opening angle bracket without a space.
